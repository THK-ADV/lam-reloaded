# Routes
# This file defines all() application routes (Higher priority routes first)
# ~~~~

GET           /                                                                controllers.HomepageController.index

# Degree 
PUT           /degrees/:id                                                     controllers.DegreeController.update(id)
GET           /degrees                                                         controllers.DegreeController.all()
GET           /degrees/:id                                                     controllers.DegreeController.get(id)

# Course 
POST          /courses                                                         controllers.CourseController.create()
PUT           /courses/:id                                                     controllers.CourseController.update(id)
GET           /courses                                                         controllers.CourseController.all()
GET           /courses/:id                                                     controllers.CourseController.get(id)

# Group 2
GET           /courses/:c/labworks/:l/groups                                   controllers.GroupController.allFrom(c, l)
GET           /courses/:c/labworks/:l/groups/preview                           controllers.GroupController.preview(c, l)

# Labwork 
GET           /labworks/degrees/:degree                                        controllers.LabworkController.allWithDegree(degree)
GET           /labworks/:id                                                    controllers.LabworkController.get(id)

# Labwork restricted
POST          /courses/:course/labworks                                        controllers.LabworkController.createFrom(course)
PUT           /courses/:course/labworks/:id                                    controllers.LabworkController.updateFrom(course, id)
GET           /courses/:course/labworks                                        controllers.LabworkController.allFrom(course)
GET           /courses/:course/labworks/:id                                    controllers.LabworkController.getFrom(course, id)
DELETE        /courses/:course/labworks/:id                                    controllers.LabworkController.invalidateFrom(course, id)

# Room
POST          /rooms                                                           controllers.RoomController.create()
PUT           /rooms/:id                                                       controllers.RoomController.update(id)
GET           /rooms                                                           controllers.RoomController.all()
GET           /rooms/:id                                                       controllers.RoomController.get(id)
DELETE        /rooms/:id                                                       controllers.RoomController.invalidate(id)

# Semester 
POST          /semesters                                                       controllers.SemesterController.create()
PUT           /semesters/:id                                                   controllers.SemesterController.update(id)
GET           /semesters                                                       controllers.SemesterController.all()
GET           /semesters/:id                                                   controllers.SemesterController.get(id)
DELETE        /semesters/:id                                                   controllers.SemesterController.invalidate(id)

# Role 
GET           /roles/:id                                                       controllers.RoleController.get(id)
GET           /roles                                                           controllers.RoleController.all()

# Authority 
POST          /authorities                                                     controllers.AuthorityController.create()
GET           /authorities                                                     controllers.AuthorityController.all()
GET           /authorities/:id                                                 controllers.AuthorityController.get(id)
DELETE        /authorities/:id                                                 controllers.AuthorityController.invalidate(id)

# LabworkApplications 
POST          /labworkApplications                                             controllers.LabworkApplicationController.create()
PUT           /labworkApplications/:id                                         controllers.LabworkApplicationController.update(id)
GET           /labworkApplications                                             controllers.LabworkApplicationController.all()
GET           /labworkApplications/:id                                         controllers.LabworkApplicationController.get(id)
DELETE        /labworkApplications/:id                                         controllers.LabworkApplicationController.invalidate(id)

GET           /courses/:c/labworks/:l/labworkApplications/count                controllers.LabworkApplicationController.countFrom(c, l)

# Schedule / ScheduleEntries
POST          /courses/:c/scheduleEntries                                      controllers.ScheduleEntryController.createFrom(c)
GET           /courses/:c/labworks/:l/scheduleEntries/preview                  controllers.ScheduleEntryController.preview(c, l)

GET           /courses/:c/scheduleEntries                                      controllers.ScheduleEntryController.allFrom(c)
GET           /courses/:c/labworks/:l/scheduleEntries                          controllers.ScheduleEntryController.allFromLabwork(c, l)
GET           /courses/:c/scheduleEntries/:id                                  controllers.ScheduleEntryController.getFrom(c, id)
PUT           /courses/:c/scheduleEntries/:id                                  controllers.ScheduleEntryController.updateFrom(c, id)
DELETE        /courses/:c/labworks/:l/scheduleEntries                          controllers.ScheduleEntryController.invalidateFrom(c, l)

# Timetable restricted

POST          /courses/:c/timetables                                           controllers.TimetableController.createFrom(c)
PUT           /courses/:c/timetables/:id                                       controllers.TimetableController.updateFrom(c, id)
GET           /courses/:c/timetables                                           controllers.TimetableController.allFrom(c)
GET           /courses/:c/timetables/:id                                       controllers.TimetableController.getFrom(c, id)
DELETE        /courses/:c/timetables/:id                                       controllers.TimetableController.invalidateFrom(c, id)
DELETE        /courses/:c/timetables/:tid/blacklists/:bid                      controllers.TimetableController.removeBlacklistFrom(c, tid, bid)

# Blacklist 
POST          /blacklists                                                      controllers.BlacklistController.create()
POST          /blacklists/range                                                controllers.BlacklistController.createFromRange()
POST          /blacklists/year/:year                                           controllers.BlacklistController.createFor(year)
PUT           /blacklists/:id                                                  controllers.BlacklistController.update(id)
GET           /blacklists                                                      controllers.BlacklistController.all()
GET           /blacklists/year/:year                                           controllers.BlacklistController.preview(year)
GET           /blacklists/:id                                                  controllers.BlacklistController.get(id)
DELETE        /blacklists/:id                                                  controllers.BlacklistController.invalidate(id)

# ReportCardEntry 
GET           /reportCardEntries/student/:s                                    controllers.ReportCardEntryController.getForStudent(s)

POST          /courses/:c/labworks/:l/reportCardEntries                        controllers.ReportCardEntryController.createFrom(c, l)
POST          /courses/:c/labworks/:l/reportCardEntries/extend                 controllers.ReportCardEntryController.extend(c, l)
GET           /courses/:c/reportCardEntries                                    controllers.ReportCardEntryController.allFrom(c)
GET           /courses/:c/scheduleEntries/:s/reportCardEntries                 controllers.ReportCardEntryController.allFromScheduleEntry(c, s)
GET           /courses/:c/labworks/:l/reportCardEntries/count                  controllers.ReportCardEntryController.countFrom(c, l)
DELETE        /courses/:c/labworks/:l/reportCardEntries                        controllers.ReportCardEntryController.invalidateFrom(c, l)

# ReportCardEntryType 
PUT           /courses/:c/reportCardEntryTypes/:id                             controllers.ReportCardEntryTypeController.updateFrom(c, id)

# ReportCardRescheduled 
POST          /courses/:c/reportCardReschedules                                controllers.ReportCardRescheduledController.createFrom(c)
GET           /courses/:c/reportCardReschedules                                controllers.ReportCardRescheduledController.allFrom(c)
GET           /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.getFrom(c, id)
PUT           /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.updateFrom(c, id)
DELETE        /courses/:c/reportCardReschedules/:id                            controllers.ReportCardRescheduledController.invalidateFrom(c, id)

# ReportCardRetry 
POST          /courses/:c/reportCardRetries                                    controllers.ReportCardRetryController.createFrom(c)
GET           /courses/:c/reportCardRetries                                    controllers.ReportCardRetryController.allFrom(c)
GET           /courses/:c/reportCardRetries/:id                                controllers.ReportCardRetryController.getFrom(c, id)
PUT           /courses/:c/reportCardRetries/:id                                controllers.ReportCardRetryController.updateFrom(c, id)
DELETE        /courses/:c/reportCardRetries/:id                                controllers.ReportCardRetryController.invalidateFrom(c, id)

# ReportCardEvaluation 
GET           /reportCardEvaluations/student/:s                                controllers.ReportCardEvaluationController.get(s)

# ReportCardEvaluation restricted
POST          /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.createFrom(c, l)
POST          /courses/:c/labworks/:l/students/:s/reportCardEvaluations        controllers.ReportCardEvaluationController.createForStudent(c, l, s)
GET           /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.allFrom(c, l)
GET           /courses/:c/labworks/:l/reportCardEvaluations/sheet              controllers.ReportCardEvaluationController.renderEvaluationSheet(c, l)
PUT           /courses/:c/labworks/:l/reportCardEvaluations/:id                controllers.ReportCardEvaluationController.updateFrom(c, l, id)
DELETE        /courses/:c/labworks/:l/reportCardEvaluations                    controllers.ReportCardEvaluationController.invalidateFromLabwork(c, l)
DELETE        /courses/:c/labworks/:l/students/:s/reportCardEvaluations        controllers.ReportCardEvaluationController.invalidateFromStudent(c, l, s)

# ReportCardEvaluationPattern 
POST          /courses/:c/reportCardEvaluationPatterns                         controllers.ReportCardEvaluationPatternController.createFrom(c)
GET           /courses/:c/reportCardEvaluationPatterns                         controllers.ReportCardEvaluationPatternController.allFrom(c)
GET           /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.getFrom(c, id)
PUT           /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.updateFrom(c, id)
DELETE        /courses/:c/reportCardEvaluationPatterns/:id                     controllers.ReportCardEvaluationPatternController.invalidateFrom(c, id)

# AssignmentEntries
POST          /courses/:c/assignmentEntries                                    controllers.AssignmentEntryController.createFrom(c)
PUT           /courses/:c/assignmentEntries/takeover                           controllers.AssignmentEntryController.takeover(c)
PUT           /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.updateFrom(c, id)
GET           /courses/:c/assignmentEntries                                    controllers.AssignmentEntryController.allFrom(c)
GET           /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.getFrom(c, id)
DELETE        /courses/:c/assignmentEntries/:id                                controllers.AssignmentEntryController.invalidateFrom(c, id)

# Users 
# POST          /users                                                           controllers.UserControllerPostgres.create()
GET           /users                                                           controllers.UserController.all()
GET           /labworks/:labwork/users/:user/buddies/:buddy                    controllers.UserController.buddy(labwork, user, buddy)
GET           /users/:id                                                       controllers.UserController.get(id)

# Mail
POST          /courses/:c/mails                                                controllers.MailController.sendMailWithBody(c)
POST          /courses/:c/labworks/:l/mails                                    controllers.MailController.sendMailToAttendeesOf(c, l)

# Dashboard
GET           /dashboard                                                       controllers.DashboardController.dashboard(systemId: Option[String])

# Service
PUT           /courses/:c/insertIntoGroup                                      controllers.serviceResource.LwmServiceController.insertStudentToGroup(c)
PUT           /courses/:c/removeFromGroup                                      controllers.serviceResource.LwmServiceController.removeStudentFromGroup(c)
PUT           /courses/:c/moveToGroup                                          controllers.serviceResource.LwmServiceController.moveStudentToGroup(c)

POST          /queries                                                         controllers.QueryController.performQuery
GET           /queries                                                         controllers.QueryController.queryOptions

# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                    controllers.Assets.at(path="/public", file)